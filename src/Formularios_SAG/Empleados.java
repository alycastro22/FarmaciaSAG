/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Formularios_SAG;

import Conexion.Conexion;
import java.awt.Color;
import java.awt.Image;
import java.awt.Toolkit;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Allisson Castro
 */
public class Empleados extends javax.swing.JFrame {

    /**
     * Creates new form Empleados
     */
    @Override
    public Image getIconImage() {
        Image retValue = Toolkit.getDefaultToolkit().getImage(ClassLoader.getSystemResource("componentes/LOGOSAG(2).png"));
        return retValue;
    }

    public static String Id_emp = "0";

    public Empleados() {
        initComponents();

        BotonActivoE.setVisible(Boolean.FALSE);
        BotonInactivoE.setVisible(Boolean.FALSE);
        Cargarg ch = new Empleados.Cargarg();
        ComboGeneroE.setModel(ch.getvalues());
        CargarSucursal cs = new Empleados.CargarSucursal();
        ComboSucursalE.setModel(cs.getvalues());
        CargarTDocumento ct = new Empleados.CargarTDocumento();
        ComboDocumento.setModel(ct.getvalues());
        cargartabla();
        errorNombre.setVisible(false);
        errorNumDocumento.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grupoBotonesEmpleados = new javax.swing.ButtonGroup();
        ComboSucursalE = new javax.swing.JComboBox<>();
        ComboDocumento = new javax.swing.JComboBox<>();
        BotonCargoHistoricoE = new javax.swing.JLabel();
        BotonSueldoHistoricoE = new javax.swing.JLabel();
        BotonEditarE = new javax.swing.JLabel();
        BotonAgregarE = new javax.swing.JLabel();
        BotonBuscarE = new javax.swing.JLabel();
        txtBuscarE = new javax.swing.JTextField();
        BotonActivoE = new javax.swing.JRadioButton();
        BotonInactivoE = new javax.swing.JRadioButton();
        BotonCancelarE = new javax.swing.JLabel();
        BotonGuardarE = new javax.swing.JLabel();
        ComboGeneroE = new javax.swing.JComboBox<>();
        txtDocumentoE = new javax.swing.JTextField();
        txtNombreE = new javax.swing.JTextField();
        botonRegresarE = new javax.swing.JLabel();
        errorNumDocumento = new javax.swing.JLabel();
        errorNombre = new javax.swing.JLabel();
        txtCargoE = new javax.swing.JTextField();
        txtIdE = new javax.swing.JLabel();
        txtSueldoE = new javax.swing.JTextField();
        txtFechaNacimientoE = new javax.swing.JTextField();
        barraEmpleado = new javax.swing.JScrollPane();
        TablaEmpleado = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        ComboSucursalE.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        ComboSucursalE.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tegucigalpa", "San Pedro Sula" }));
        ComboSucursalE.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ComboSucursalE.setEnabled(false);
        ComboSucursalE.setOpaque(false);
        ComboSucursalE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboSucursalEActionPerformed(evt);
            }
        });
        getContentPane().add(ComboSucursalE, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 615, 200, 30));
        ComboSucursalE.getAccessibleContext().setAccessibleDescription("");

        ComboDocumento.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        ComboDocumento.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "DNI", "Pasaporte", "Licencia" }));
        ComboDocumento.setBorder(null);
        ComboDocumento.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ComboDocumento.setEnabled(false);
        ComboDocumento.setOpaque(false);
        ComboDocumento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboDocumentoActionPerformed(evt);
            }
        });
        getContentPane().add(ComboDocumento, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 326, 200, 30));

        BotonCargoHistoricoE.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        BotonCargoHistoricoE.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BotonCargoHistoricoEMouseClicked(evt);
            }
        });
        getContentPane().add(BotonCargoHistoricoE, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 220, 140, 50));

        BotonSueldoHistoricoE.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        BotonSueldoHistoricoE.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BotonSueldoHistoricoEMouseClicked(evt);
            }
        });
        getContentPane().add(BotonSueldoHistoricoE, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 220, 150, 50));

        BotonEditarE.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        BotonEditarE.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BotonEditarEMouseClicked(evt);
            }
        });
        getContentPane().add(BotonEditarE, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 140, 130, 50));

        BotonAgregarE.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        BotonAgregarE.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BotonAgregarEMouseClicked(evt);
            }
        });
        getContentPane().add(BotonAgregarE, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 140, 130, 50));

        BotonBuscarE.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BotonBuscarEMouseClicked(evt);
            }
        });
        getContentPane().add(BotonBuscarE, new org.netbeans.lib.awtextra.AbsoluteConstraints(940, 240, 40, 30));

        txtBuscarE.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        txtBuscarE.setForeground(new java.awt.Color(153, 153, 153));
        txtBuscarE.setText("Buscar por ID o por Nombre");
        txtBuscarE.setBorder(null);
        txtBuscarE.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        txtBuscarE.setOpaque(false);
        txtBuscarE.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtBuscarEFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtBuscarEFocusLost(evt);
            }
        });
        txtBuscarE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBuscarEActionPerformed(evt);
            }
        });
        txtBuscarE.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtBuscarEKeyTyped(evt);
            }
        });
        getContentPane().add(txtBuscarE, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 233, 250, 30));
        txtBuscarE.getAccessibleContext().setAccessibleDescription("");

        grupoBotonesEmpleados.add(BotonActivoE);
        BotonActivoE.setFont(new java.awt.Font("Georgia", 1, 18)); // NOI18N
        BotonActivoE.setForeground(new java.awt.Color(255, 255, 255));
        BotonActivoE.setText("Activo");
        BotonActivoE.setOpaque(false);
        BotonActivoE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonActivoEActionPerformed(evt);
            }
        });
        getContentPane().add(BotonActivoE, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 670, -1, -1));

        grupoBotonesEmpleados.add(BotonInactivoE);
        BotonInactivoE.setFont(new java.awt.Font("Georgia", 1, 18)); // NOI18N
        BotonInactivoE.setForeground(new java.awt.Color(255, 255, 255));
        BotonInactivoE.setText("Inactivo");
        BotonInactivoE.setOpaque(false);
        BotonInactivoE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonInactivoEActionPerformed(evt);
            }
        });
        getContentPane().add(BotonInactivoE, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 670, -1, -1));

        BotonCancelarE.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        BotonCancelarE.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BotonCancelarEMouseClicked(evt);
            }
        });
        getContentPane().add(BotonCancelarE, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 140, 130, 50));

        BotonGuardarE.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        BotonGuardarE.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BotonGuardarEMouseClicked(evt);
            }
        });
        getContentPane().add(BotonGuardarE, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 140, 140, 50));

        ComboGeneroE.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        ComboGeneroE.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Masculino", "Femenino" }));
        ComboGeneroE.setBorder(null);
        ComboGeneroE.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ComboGeneroE.setEnabled(false);
        ComboGeneroE.setOpaque(false);
        ComboGeneroE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboGeneroEActionPerformed(evt);
            }
        });
        getContentPane().add(ComboGeneroE, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 477, 200, 30));

        txtDocumentoE.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        txtDocumentoE.setForeground(new java.awt.Color(153, 153, 153));
        txtDocumentoE.setText("Ingrese Número de Documento");
        txtDocumentoE.setBorder(null);
        txtDocumentoE.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        txtDocumentoE.setEnabled(false);
        txtDocumentoE.setOpaque(false);
        txtDocumentoE.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDocumentoEFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDocumentoEFocusLost(evt);
            }
        });
        txtDocumentoE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDocumentoEActionPerformed(evt);
            }
        });
        txtDocumentoE.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDocumentoEKeyTyped(evt);
            }
        });
        getContentPane().add(txtDocumentoE, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 374, 200, 30));

        txtNombreE.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        txtNombreE.setForeground(new java.awt.Color(153, 153, 153));
        txtNombreE.setText("Ingrese Nombre y Apellido");
        txtNombreE.setBorder(null);
        txtNombreE.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        txtNombreE.setEnabled(false);
        txtNombreE.setOpaque(false);
        txtNombreE.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtNombreEFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNombreEFocusLost(evt);
            }
        });
        txtNombreE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNombreEActionPerformed(evt);
            }
        });
        txtNombreE.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNombreEKeyTyped(evt);
            }
        });
        getContentPane().add(txtNombreE, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 278, 200, 30));
        txtNombreE.getAccessibleContext().setAccessibleName("");

        botonRegresarE.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        botonRegresarE.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                botonRegresarEMouseClicked(evt);
            }
        });
        getContentPane().add(botonRegresarE, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 40, 130, 40));

        errorNumDocumento.setIcon(new javax.swing.ImageIcon(getClass().getResource("/componentes/iconoX.png"))); // NOI18N
        getContentPane().add(errorNumDocumento, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 470, -1, -1));

        errorNombre.setIcon(new javax.swing.ImageIcon(getClass().getResource("/componentes/iconoX.png"))); // NOI18N
        getContentPane().add(errorNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 330, -1, -1));

        txtCargoE.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        txtCargoE.setForeground(new java.awt.Color(153, 153, 153));
        txtCargoE.setText("Cargo");
        txtCargoE.setBorder(null);
        txtCargoE.setOpaque(false);
        txtCargoE.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCargoEFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCargoEFocusLost(evt);
            }
        });
        getContentPane().add(txtCargoE, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 525, 200, 30));

        txtIdE.setEnabled(false);
        getContentPane().add(txtIdE, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 250, 20, 20));

        txtSueldoE.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        txtSueldoE.setForeground(new java.awt.Color(153, 153, 153));
        txtSueldoE.setText("Sueldo");
        txtSueldoE.setBorder(null);
        txtSueldoE.setOpaque(false);
        txtSueldoE.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtSueldoEFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtSueldoEFocusLost(evt);
            }
        });
        getContentPane().add(txtSueldoE, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 570, 200, 30));

        txtFechaNacimientoE.setBackground(new java.awt.Color(240, 240, 240));
        txtFechaNacimientoE.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        txtFechaNacimientoE.setForeground(new java.awt.Color(153, 153, 153));
        txtFechaNacimientoE.setText("Ingrese Fecha Nacimiento");
        txtFechaNacimientoE.setToolTipText("");
        txtFechaNacimientoE.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        txtFechaNacimientoE.setOpaque(false);
        txtFechaNacimientoE.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtFechaNacimientoEFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtFechaNacimientoEFocusLost(evt);
            }
        });
        getContentPane().add(txtFechaNacimientoE, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 425, 200, 30));

        TablaEmpleado.setFont(new java.awt.Font("Georgia", 0, 18)); // NOI18N
        TablaEmpleado.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Id", "Nombre Completo", "Tipo de Documento", "Documento", "Fecha Nacimiento", "Género", "Cargo", "Sueldo", "Sucursal"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Float.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TablaEmpleado.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        TablaEmpleado.setRowHeight(30);
        TablaEmpleado.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TablaEmpleadoMouseClicked(evt);
            }
        });
        barraEmpleado.setViewportView(TablaEmpleado);

        getContentPane().add(barraEmpleado, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 280, 670, 380));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/componentes/Pantalla Empleados(3).png"))); // NOI18N
        jLabel1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1MouseClicked(evt);
            }
        });
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -10, 1000, 740));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txtDocumentoEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDocumentoEActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDocumentoEActionPerformed

    private void ComboDocumentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboDocumentoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ComboDocumentoActionPerformed

    private void txtBuscarEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBuscarEActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBuscarEActionPerformed

    private void txtNombreEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNombreEActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNombreEActionPerformed

    private void ComboSucursalEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboSucursalEActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ComboSucursalEActionPerformed

    private void BotonBuscarEMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BotonBuscarEMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_BotonBuscarEMouseClicked

    private void botonRegresarEMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonRegresarEMouseClicked
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MenuPrincipal().setVisible(true);
            }
        });
        this.dispose();

    }//GEN-LAST:event_botonRegresarEMouseClicked

    private void BotonGuardarEMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BotonGuardarEMouseClicked
        if (txtNombreE.getText().equals("Ingrese Nombre y Apellido") || txtDocumentoE.getText().equals("Ingrese Número de Documento") || ComboSucursalE.equals("Seleccione Sucursal...") || ComboDocumento.equals("Seleccione Tipo Documento...") || ComboGeneroE.equals("Seleccione Genero...")) {
            JOptionPane.showMessageDialog(null, "No se puede Guardar datos vacios");
        } else {
            String Nombre = txtNombreE.getText();
            int tpDoc = ComboDocumento.getSelectedIndex() + 1;
            String Documento = txtDocumentoE.getText();
            int Genero = ComboGeneroE.getSelectedIndex() + 1;
            int Sucursal = ComboSucursalE.getSelectedIndex() + 1;

            try {
                Connection con = Conexion.getConexion();
                PreparedStatement ps = con.prepareStatement("Insert into Empleados (NombreE, Id_Genero,Documento,Id_Sucursal, estado, Id_TipoDocumento) VALUES(?,?,?,?,?,?)");
                ps.setString(1, Nombre);
                ps.setInt(2, Genero);
                ps.setString(3, Documento);
                ps.setInt(4, Sucursal);
                ps.setString(5, "Activo");
                ps.setInt(6, tpDoc);
                ps.executeUpdate();

                JOptionPane.showMessageDialog(null, "Registro guardado");
                cargartabla();
                Limpiar();
                Inhabillitar();

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, ex.toString());
            }
        }
    }//GEN-LAST:event_BotonGuardarEMouseClicked

    private void BotonEditarEMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BotonEditarEMouseClicked

        if (txtNombreE.getText().equals("Ingrese Nombre y Apellido") || txtDocumentoE.getText().equals("Ingrese Número de Documento")) {
            JOptionPane.showMessageDialog(null, "No se puede Guardar datos vacios");
        } else {
            int IdEmpleado = Integer.parseInt(txtIdE.getText());
            String Nombre = txtNombreE.getText();
            int TipoDocumento = ComboDocumento.getSelectedIndex() + 1;
            String Documento = txtDocumentoE.getText();
            int Genero = ComboGeneroE.getSelectedIndex() + 1;
            int Sucursal = ComboSucursalE.getSelectedIndex() + 1;

            String Estado = "";

            if (BotonActivoE.isSelected() == true) {
                Estado = "Activo";
            } else if (BotonInactivoE.isSelected() == true) {
                Estado = "Inactivo";
            }
            try {
                Connection con = Conexion.getConexion();
                PreparedStatement ps = con.prepareStatement("Update Empleados set NombreE=?, Id_Genero=?,Documento=?,Id_Sucursal=?, Estado=?,Id_TipoDocumento=? Where Id_Empleado=?");
                ps.setString(1, Nombre);
                ps.setInt(2, Genero);
                ps.setString(3, Documento);
                ps.setInt(4, Sucursal);
                ps.setString(5, Estado);
                ps.setInt(6, TipoDocumento);
                ps.setInt(7, IdEmpleado);
                ps.executeUpdate();
                JOptionPane.showMessageDialog(null, "Registro Actualizado");
                cargartabla();
                BotonActivoE.setVisible(Boolean.FALSE);
                BotonInactivoE.setVisible(Boolean.FALSE);
                Limpiar();
                Inhabillitar();

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, ex.toString());
            }
        }
    }//GEN-LAST:event_BotonEditarEMouseClicked

    private void txtNombreEFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNombreEFocusLost
        if (txtNombreE.getText().equals("")) {
            txtNombreE.setText("Ingrese Nombre y Apellido");
            txtNombreE.setForeground(new Color(153, 153, 153));
       } else if (!txtNombreE.getText().isEmpty()) {
            if (!txtNombreE.getText().matches("^[A-Z-ÁÉÍÓÚÑ]{1}[a-z-áéíóúñ]+$")) {
                JOptionPane.showMessageDialog(null, "Debes escribir un nombre comenzando en mayúscula. No utilice espacios", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_txtNombreEFocusLost

    private void txtNombreEKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNombreEKeyTyped
        if (txtNombreE.getText().length() > 20) {
            JOptionPane.showMessageDialog(null, "Alcanzaste el máximo de caracteres para este campo", "Advertencia", JOptionPane.WARNING_MESSAGE);
            evt.consume();
        } else if (txtNombreE.getText().length() > 0) {
            if (!txtNombreE.getText().matches("^(?!.*([A-Za-zñÑáéíóúÁÉÍÓÚ\\s])\\1{2})[A-Za-zñÑáéíóúÁÉÍÓÚ\\s0-9]+$")) {
                JOptionPane.showMessageDialog(null, "No repitas caracteres de forma incorrecta", "Advertencia", JOptionPane.WARNING_MESSAGE);
                evt.consume();
            }
        }
    }//GEN-LAST:event_txtNombreEKeyTyped

    public void validarNumerosLetras(java.awt.event.KeyEvent e) {
        if (e.getKeyChar() >= 33 && e.getKeyChar() <= 47
                || e.getKeyChar() >= 58 && e.getKeyChar() <= 64
                || e.getKeyChar() >= 91 && e.getKeyChar() <= 96
                || e.getKeyChar() >= 123 && e.getKeyChar() <= 129
                || e.getKeyChar() >= 145 && e.getKeyChar() <= 159
                || e.getKeyChar() >= 164 && e.getKeyChar() <= 238) {

            e.consume();
            JOptionPane.showMessageDialog(null, "Este campo no acepta caracteres especiales", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
    }

    private void txtBuscarEKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBuscarEKeyTyped
        buscarData(txtBuscarE.getText());
        validarNumerosLetras(evt);
        if (txtBuscarE.getText().length() > 15) {
            JOptionPane.showMessageDialog(null, "Alcanzaste el máximo de caracteres para este campo", "Advertencia", JOptionPane.WARNING_MESSAGE);
            evt.consume();
        } else if (txtBuscarE.getText().length() > 0) {
            if (!txtBuscarE.getText().matches("^(?!.*([A-Za-zñÑáéíóúÁÉÍÓÚ\\s])\\1{2})[A-Za-zñÑáéíóúÁÉÍÓÚ\\s0-9]+$")) {
                JOptionPane.showMessageDialog(null, "No repitas caracteres de forma incorrecta", "Advertencia", JOptionPane.WARNING_MESSAGE);
                evt.consume();
            }
        }
    }//GEN-LAST:event_txtBuscarEKeyTyped

    private void txtDocumentoEKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDocumentoEKeyTyped
        if (ComboDocumento.getSelectedIndex() == 0) {
            validarNumerosLetras(evt);
            char validar = evt.getKeyChar();
            if (Character.isLetter(validar)) {
                getToolkit().beep();
                evt.consume();
                JOptionPane.showMessageDialog(null, "Este tipo de documento solo contiene números", "Error", JOptionPane.ERROR_MESSAGE);
            } else if (txtDocumentoE.getText().length() > 12) {
                evt.consume();
            }
        }
        if (ComboDocumento.getSelectedIndex() == 1) {
            if (txtDocumentoE.getText().length() > 6) {
                evt.consume();
            }
        }
        if (ComboDocumento.getSelectedIndex() == 2) {
            validarNumerosLetras(evt);
            char validar = evt.getKeyChar();
            if (Character.isLetter(validar)) {
                getToolkit().beep();
                evt.consume();
                JOptionPane.showMessageDialog(null, "Este tipo de documento solo contiene números", "Error", JOptionPane.ERROR_MESSAGE);
            } else if (txtDocumentoE.getText().length() > 13) {
                evt.consume();
            }
        }
    }//GEN-LAST:event_txtDocumentoEKeyTyped

    void buscarData(String valor) {
        String[] titulos = {"ID", "Nombre Completo", "Tipo Documento", "Documento", "Genero", "Sucursal", "Estado"};
        String[] registros = new String[13];
        String sql = "Select E.Id_Empleado, E.NombreE, TD.Tipo_Documento,E.Documento, G.Genero, S.Nombre, E.Estado\n"
                + "From Empleados as E\n"
                + "INNER JOIN Tipo_Documento AS TD ON E.Id_TipoDocumento = TD.Id_Documento\n"
                + "INNER JOIN Genero AS G ON E.Id_Genero = G.Id_Genero\n"
                + "INNER JOIN Sucursal AS S ON E.Id_Sucursal = S.Id_Sucursal\n"
                + "WHERE CONCAT (E.Id_Empleado, ' ', E.NombreE, ' ', E.Documento) LIKE '%" + valor + "%'\n"
                + "ORDER BY E.Id_Empleado";

        DefaultTableModel model = new DefaultTableModel(null, titulos);
        Connection con = Conexion.getConexion();

        try {

            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery(sql);

            while (rs.next()) {
                registros[0] = rs.getString("Id_Empleado");
                registros[1] = rs.getString("NombreE");
                registros[2] = rs.getString("Tipo_Documento");
                registros[3] = rs.getString("Documento");
                registros[4] = rs.getString("Genero");
                registros[5] = rs.getString("Nombre");
                registros[6] = rs.getString("Estado");
                model.addRow(registros);
            }

            TablaEmpleado.setModel(model);
            // anchoColumnas();
        } catch (SQLException ex) {
            Logger.getLogger(Clientes.class.getName()).log(Level.SEVERE, null, ex);
        }
    }


    private void TablaEmpleadoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablaEmpleadoMouseClicked
        // TODO add your handling code here:
        try {
            int fila = TablaEmpleado.getSelectedRow();
            int id = Integer.parseInt(TablaEmpleado.getValueAt(fila, 0).toString());
            PreparedStatement ps;
            ResultSet rs;
            Connection con = Conexion.getConexion();
            ps = con.prepareStatement("Select E.NombreE, TD.Tipo_Documento,E.Documento, G.Genero, S.Nombre, E.Estado\n"
                    + "From Empleados as E\n"
                    + "INNER JOIN Tipo_Documento AS TD ON E.Id_TipoDocumento = TD.Id_Documento\n"
                    + "INNER JOIN Genero AS G ON E.Id_Genero = G.Id_Genero\n"
                    + "INNER JOIN Sucursal AS S ON E.Id_Sucursal = S.Id_Sucursal\n"
                    + "where E.Id_Empleado=?\n"
                    + "Order By E.Id_Empleado");
            ps.setInt(1, id);
            rs = ps.executeQuery();

            while (rs.next()) {
                txtIdE.setText(String.valueOf(id));
                txtNombreE.setText(rs.getString("NombreE"));
                ComboDocumento.setSelectedItem(rs.getString("Tipo_Documento"));
                txtDocumentoE.setText(rs.getString("Documento"));
                ComboGeneroE.setSelectedItem(rs.getString("Genero"));
                ComboSucursalE.setSelectedItem(rs.getString("Nombre"));

                if (rs.getString("estado").equals("Activo")) {
                    BotonActivoE.setSelected(true);
                } else if (rs.getString("estado").equals("Inactivo")) {
                    BotonInactivoE.setSelected(true);
                }
            }

            BotonActivoE.setVisible(Boolean.TRUE);
            BotonInactivoE.setVisible(Boolean.TRUE);
            Id_emp = txtIdE.getText();
            Habillitar();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.toString());
        }

    }//GEN-LAST:event_TablaEmpleadoMouseClicked

    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel1MouseClicked

    private void BotonAgregarEMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BotonAgregarEMouseClicked
        // TODO add your handling code here:
        Habillitar();
    }//GEN-LAST:event_BotonAgregarEMouseClicked

    private void BotonCancelarEMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BotonCancelarEMouseClicked
        Limpiar();
        Inhabillitar();
    }//GEN-LAST:event_BotonCancelarEMouseClicked

    private void txtNombreEFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNombreEFocusGained
        if (txtNombreE.getText().equals("Ingrese Nombre y Apellido")) {
            txtNombreE.setText("");
            txtNombreE.setForeground(new Color(0, 0, 0));
        }

    }//GEN-LAST:event_txtNombreEFocusGained

    private void txtDocumentoEFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDocumentoEFocusGained
        if (txtDocumentoE.getText().equals("Ingrese Número de Documento")) {
            txtDocumentoE.setText("");
            txtDocumentoE.setForeground(new Color(0, 0, 0));
        }
    }//GEN-LAST:event_txtDocumentoEFocusGained

    private void txtDocumentoEFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDocumentoEFocusLost
        if (txtDocumentoE.getText().equals("")) {
            txtDocumentoE.setText("Ingrese Número de Documento");
            txtDocumentoE.setForeground(new Color(153, 153, 153));
        }
    }//GEN-LAST:event_txtDocumentoEFocusLost

    private void txtBuscarEFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtBuscarEFocusGained
        if (txtBuscarE.getText().equals("Buscar por ID o por Nombre")) {
            txtBuscarE.setText("");
            txtBuscarE.setForeground(new Color(0, 0, 0));
        }
    }//GEN-LAST:event_txtBuscarEFocusGained

    private void txtBuscarEFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtBuscarEFocusLost
        if (txtBuscarE.getText().equals("")) {
            txtBuscarE.setText("Buscar por ID o por Nombre");
            txtBuscarE.setForeground(new Color(153, 153, 153));
        }
    }//GEN-LAST:event_txtBuscarEFocusLost

    private void BotonCargoHistoricoEMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BotonCargoHistoricoEMouseClicked
        CargoHistorico CH = new CargoHistorico();
        {
            CH.setVisible(true);
            dispose();
        }
    }//GEN-LAST:event_BotonCargoHistoricoEMouseClicked

    private void BotonSueldoHistoricoEMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BotonSueldoHistoricoEMouseClicked
        SueldoHistorico SH = new SueldoHistorico();
        {
            SH.setVisible(true);
            dispose();
        }

    }//GEN-LAST:event_BotonSueldoHistoricoEMouseClicked

    private void BotonInactivoEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonInactivoEActionPerformed
        int IdEmpleado = Integer.parseInt(txtIdE.getText());
        String Estado = "Inactivo";
        try {
            Connection con = Conexion.getConexion();
            PreparedStatement ps = con.prepareStatement("Update Empleados set Estado=? Where Id_Empleado=?");
            ps.setString(1, Estado);
            ps.setInt(2, IdEmpleado);
            ps.executeUpdate();
            JOptionPane.showMessageDialog(null, "Registro Inhabilitado");
            cargartabla();
            BotonActivoE.setVisible(Boolean.FALSE);
            BotonInactivoE.setVisible(Boolean.FALSE);
            Limpiar();
            Inhabillitar();

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.toString());
        }

    }//GEN-LAST:event_BotonInactivoEActionPerformed

    private void BotonActivoEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonActivoEActionPerformed
        int IdEmpleado = Integer.parseInt(txtIdE.getText());
        String Estado = "Activo";
        try {
            Connection con = Conexion.getConexion();
            PreparedStatement ps = con.prepareStatement("Update Empleados set Estado=? Where Id_Empleado=?");
            ps.setString(1, Estado);
            ps.setInt(2, IdEmpleado);
            ps.executeUpdate();
            JOptionPane.showMessageDialog(null, "Registro Habilitado");
            cargartabla();
            BotonActivoE.setVisible(Boolean.FALSE);
            BotonInactivoE.setVisible(Boolean.FALSE);
            Limpiar();
            Inhabillitar();

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.toString());
        }
    }//GEN-LAST:event_BotonActivoEActionPerformed

    private void ComboGeneroEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboGeneroEActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ComboGeneroEActionPerformed

    private void txtCargoEFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCargoEFocusGained
        if (txtCargoE.getText().equals("Cargo")) {
            txtCargoE.setText("");
            txtCargoE.setForeground(new Color(0, 0, 0));
        }
    }//GEN-LAST:event_txtCargoEFocusGained

    private void txtCargoEFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCargoEFocusLost
        if (txtCargoE.getText().equals("")) {
            txtCargoE.setText("Cargo");
            txtCargoE.setForeground(new Color(153, 153, 153));
        }
    }//GEN-LAST:event_txtCargoEFocusLost

    private void txtSueldoEFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSueldoEFocusGained
       if (txtSueldoE.getText().equals("Sueldo")) {
            txtSueldoE.setText("");
            txtSueldoE.setForeground(new Color(0, 0, 0));
        }
    }//GEN-LAST:event_txtSueldoEFocusGained

    private void txtSueldoEFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSueldoEFocusLost
        if (txtCargoE.getText().equals("")) {
            txtCargoE.setText("Sueldo");
            txtCargoE.setForeground(new Color(153, 153, 153));
        }
    }//GEN-LAST:event_txtSueldoEFocusLost

    private void txtFechaNacimientoEFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFechaNacimientoEFocusGained
        if (txtFechaNacimientoE.getText().equals("Ingrese Fecha Nacimiento")) {
            txtFechaNacimientoE.setText("");
            txtFechaNacimientoE.setForeground(new Color(0, 0, 0));
        }
    }//GEN-LAST:event_txtFechaNacimientoEFocusGained

    private void txtFechaNacimientoEFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFechaNacimientoEFocusLost
        if (txtFechaNacimientoE.getText().equals("")) {
            txtFechaNacimientoE.setText("Ingrese Fecha Nacimiento");
            txtFechaNacimientoE.setForeground(new Color(153, 153, 153));
        }
    }//GEN-LAST:event_txtFechaNacimientoEFocusLost

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Empleados.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Empleados.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Empleados.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Empleados.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Empleados().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton BotonActivoE;
    private javax.swing.JLabel BotonAgregarE;
    private javax.swing.JLabel BotonBuscarE;
    private javax.swing.JLabel BotonCancelarE;
    private javax.swing.JLabel BotonCargoHistoricoE;
    private javax.swing.JLabel BotonEditarE;
    private javax.swing.JLabel BotonGuardarE;
    private javax.swing.JRadioButton BotonInactivoE;
    private javax.swing.JLabel BotonSueldoHistoricoE;
    private javax.swing.JComboBox<String> ComboDocumento;
    private javax.swing.JComboBox<String> ComboGeneroE;
    private javax.swing.JComboBox<String> ComboSucursalE;
    private javax.swing.JTable TablaEmpleado;
    private javax.swing.JScrollPane barraEmpleado;
    private javax.swing.JLabel botonRegresarE;
    private javax.swing.JLabel errorNombre;
    private javax.swing.JLabel errorNumDocumento;
    private javax.swing.ButtonGroup grupoBotonesEmpleados;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField txtBuscarE;
    private javax.swing.JTextField txtCargoE;
    private javax.swing.JTextField txtDocumentoE;
    private javax.swing.JTextField txtFechaNacimientoE;
    private javax.swing.JLabel txtIdE;
    private javax.swing.JTextField txtNombreE;
    private javax.swing.JTextField txtSueldoE;
    // End of variables declaration//GEN-END:variables

    private void cargartabla() {
        DefaultTableModel modeloTabla = (DefaultTableModel) TablaEmpleado.getModel();
        modeloTabla.setRowCount(0);

        PreparedStatement ps;
        ResultSet rs;
        ResultSetMetaData rsmd;
        int columnas;

        try {
            Connection con = Conexion.getConexion();
            ps = con.prepareStatement("Select E.Id_Empleado, E.NombreE, TD.Tipo_Documento,E.Documento, G.Genero, S.Nombre, E.Estado\n"
                    + "From Empleados as E\n"
                    + "INNER JOIN Tipo_Documento AS TD ON E.Id_TipoDocumento = TD.Id_Documento\n"
                    + "INNER JOIN Genero AS G ON E.Id_Genero = G.Id_Genero\n"
                    + "INNER JOIN Sucursal AS S ON E.Id_Sucursal = S.Id_Sucursal\n"
                    + "Order By E.Id_Empleado");
            rs = ps.executeQuery();
            rsmd = rs.getMetaData();
            columnas = rsmd.getColumnCount();

            while (rs.next()) {
                Object[] fila = new Object[columnas];
                for (int indice = 0; indice < columnas; indice++) {
                    fila[indice] = rs.getObject(indice + 1);
                }
                modeloTabla.addRow(fila);
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.toString());
        }

    }

    private void Habillitar() {

        txtDocumentoE.enable(Boolean.TRUE);
        txtNombreE.enable(Boolean.TRUE);
        ComboDocumento.enable(Boolean.TRUE);
        ComboGeneroE.enable(Boolean.TRUE);
        ComboSucursalE.enable(Boolean.TRUE);
    }

    private void Inhabillitar() {

        txtDocumentoE.enable(Boolean.FALSE);
        txtNombreE.enable(Boolean.FALSE);
        ComboDocumento.enable(Boolean.FALSE);
        ComboGeneroE.enable(Boolean.FALSE);
        ComboSucursalE.enable(Boolean.FALSE);
    }

    private void Limpiar() {

        txtDocumentoE.setText("");
        if (txtDocumentoE.getText().equals("")) {
            txtDocumentoE.setText("Ingrese Número de Documento");
            txtDocumentoE.setForeground(new Color(153, 153, 153));
        }
        txtNombreE.setText("");
        if (txtNombreE.getText().equals("")) {
            txtNombreE.setText("Ingrese Nombre y Apellido");
            txtNombreE.setForeground(new Color(153, 153, 153));
        }

        ComboGeneroE.setSelectedIndex(0);
        ComboDocumento.setSelectedIndex(0);
        ComboSucursalE.setSelectedIndex(0);
        BotonActivoE.setVisible(Boolean.FALSE);
        BotonInactivoE.setVisible(Boolean.FALSE);

    }

    public class Cargarg {

        public DefaultComboBoxModel getvalues() {

            DefaultComboBoxModel modelo = new DefaultComboBoxModel();
            try {
                Connection con = Conexion.getConexion();
                String sql = "select Genero from Genero";
                Statement st = con.createStatement();
                ResultSet rs = st.executeQuery(sql);
                modelo.addElement("Seleccione Genero...");
                while (rs.next()) {
                    modelo.addElement(rs.getString(1));
                }
                con.close();
                rs.close();
            } catch (Exception e) {
                System.out.println(e);
            }
            return modelo;
        }
    }

    public class CargarSucursal {

        public DefaultComboBoxModel getvalues() {

            DefaultComboBoxModel modelo = new DefaultComboBoxModel();
            try {
                Connection con = Conexion.getConexion();
                String sql = "select Nombre from sucursal";
                Statement st = con.createStatement();
                ResultSet rs = st.executeQuery(sql);
                modelo.addElement("Seleccione Sucursal...");
                while (rs.next()) {
                    modelo.addElement(rs.getString(1));
                }
                con.close();
                rs.close();
            } catch (Exception e) {
                System.out.println(e);
            }
            return modelo;
        }
    }

    public class CargarTDocumento {

        public DefaultComboBoxModel getvalues() {

            DefaultComboBoxModel modelo = new DefaultComboBoxModel();
            try {
                Connection con = Conexion.getConexion();
                String sql = "select Tipo_Documento from Tipo_Documento";
                Statement st = con.createStatement();
                ResultSet rs = st.executeQuery(sql);
                modelo.addElement("Seleccione Tipo Documento...");
                while (rs.next()) {
                    modelo.addElement(rs.getString(1));
                }
                con.close();
                rs.close();
            } catch (Exception e) {
                System.out.println(e);
            }
            return modelo;
        }
    }
}
